From 068659aab4ac171901aef3d8687d86f92029538d Mon Sep 17 00:00:00 2001
From: "le.jin" <le.jin@siemens.com>
Date: Tue, 18 Jun 2019 16:16:02 +0800
Subject: [PATCH 03/13] feat:iot2050:add some example code for testing

Signed-off-by: le.jin <le.jin@siemens.com>
---
 examples/platform/CMakeLists.txt |  12 ++++
 examples/platform/aio_iot2050.c  |  95 ++++++++++++++++++++++++++++
 examples/platform/led_iot2050.c  |  81 ++++++++++++++++++++++++
 examples/platform/pwm_iot2050.c  | 105 +++++++++++++++++++++++++++++++
 examples/platform/spi_iot2050.c  |  82 ++++++++++++++++++++++++
 5 files changed, 375 insertions(+)
 create mode 100644 examples/platform/aio_iot2050.c
 create mode 100644 examples/platform/led_iot2050.c
 create mode 100644 examples/platform/pwm_iot2050.c
 create mode 100644 examples/platform/spi_iot2050.c

diff --git a/examples/platform/CMakeLists.txt b/examples/platform/CMakeLists.txt
index 08b7bb4..b03ce8d 100644
--- a/examples/platform/CMakeLists.txt
+++ b/examples/platform/CMakeLists.txt
@@ -4,6 +4,18 @@ target_link_libraries (gpio_edison mraa)
 add_executable (up2-leds up2-leds.cpp)
 target_link_libraries (up2-leds mraa)
 
+add_executable (aio_iot2050 aio_iot2050.c)
+target_link_libraries (aio_iot2050 mraa)
+
+add_executable (spi_iot2050 spi_iot2050.c)
+target_link_libraries (spi_iot2050 mraa)
+
+add_executable (pwm_iot2050 pwm_iot2050.c)
+target_link_libraries (pwm_iot2050 mraa)
+
+add_executable (led_iot2050 led_iot2050.c)
+target_link_libraries (led_iot2050 mraa)
+
 include_directories(${PROJECT_SOURCE_DIR}/api)
 include_directories(${PROJECT_SOURCE_DIR}/api/mraa)
 
diff --git a/examples/platform/aio_iot2050.c b/examples/platform/aio_iot2050.c
new file mode 100644
index 0000000..ce5875d
--- /dev/null
+++ b/examples/platform/aio_iot2050.c
@@ -0,0 +1,95 @@
+/*
+ * Author: Le Jin <le.jin@siemens.com>
+ * Copyright (c) Siemens AG, 2019
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <signal.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include "mraa/aio.h"
+
+#define NUM_CHANNELS (6)
+
+volatile sig_atomic_t flag = 1;
+
+void
+sig_handler(int signum)
+{
+    if (signum == SIGINT) {
+        fprintf(stdout, "Exiting...\n");
+        flag = 0;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    int i;
+    int value;
+    float float_value;
+    mraa_result_t status = MRAA_SUCCESS;
+    mraa_aio_context aio[NUM_CHANNELS];
+
+    signal(SIGINT, sig_handler);
+    /* init */
+    mraa_init();
+    memset(aio, 0, sizeof(mraa_aio_context) * NUM_CHANNELS);
+    for(i=0; i<NUM_CHANNELS; i++) {
+        aio[i] = mraa_aio_init(i);
+        if (aio == NULL) {
+            fprintf(stderr, "Failed to initialize AIO\n");
+            mraa_deinit();
+            return EXIT_FAILURE;
+        }
+    }
+
+    while (flag) {
+        for(i=0; i<NUM_CHANNELS; i++) {
+            value = mraa_aio_read(aio[i]);
+            float_value = mraa_aio_read_float(aio[i]);
+            fprintf(stdout, "A%d: %d, %f\n", i, value, float_value);
+        }
+        fprintf(stdout, "--------------------\n");
+        usleep(500);
+    }
+
+    /* close AIO */
+    for(i=0; i<NUM_CHANNELS; i++) {
+        status = mraa_aio_close(aio[i]);
+        if (status != MRAA_SUCCESS) {
+            goto err_exit;
+        }
+    }
+
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_SUCCESS;
+
+err_exit:
+    mraa_result_print(status);
+
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_FAILURE;
+}
diff --git a/examples/platform/led_iot2050.c b/examples/platform/led_iot2050.c
new file mode 100644
index 0000000..2250416
--- /dev/null
+++ b/examples/platform/led_iot2050.c
@@ -0,0 +1,81 @@
+/*
+ * Author: Le Jin <le.jin@siemens.com>
+ * Copyright (c) Siemens AG, 2019
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include "mraa/led.h"
+
+#define LED_TRIGGER "timer"
+#define NUM_LEDS (4)
+
+int main(void)
+{
+    mraa_result_t status = MRAA_SUCCESS;
+    mraa_led_context led[NUM_LEDS];
+    int i;
+
+    /* initialize mraa for the platform (not needed most of the time) */
+    mraa_init();
+
+    //! [Interesting]
+    /* initialize LED */
+    for(i=0; i<NUM_LEDS; i++) {
+        led[i] = mraa_led_init(i);
+        if (led == NULL) {
+            fprintf(stderr, "Failed to initialize LED\n");
+            mraa_deinit();
+            return EXIT_FAILURE;
+        }
+    }
+
+    /* set LED trigger to heartbeat */
+    for(i=0; i<NUM_LEDS; i++) {
+        status = mraa_led_set_trigger(led[i], LED_TRIGGER);
+        if (status != MRAA_SUCCESS) {
+            fprintf(stderr, "unable to set LED trigger to: timer\n");
+            goto err_exit;
+        }
+    }
+
+    fprintf(stdout, "LED trigger set to: timer\n");
+
+    /* close LED */
+    for(i=0; i<NUM_LEDS; i++) {
+        mraa_led_close(led[i]);
+    }
+
+    //! [Interesting]
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_SUCCESS;
+
+err_exit:
+    mraa_result_print(status);
+
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_FAILURE;
+}
diff --git a/examples/platform/pwm_iot2050.c b/examples/platform/pwm_iot2050.c
new file mode 100644
index 0000000..bfc7a9d
--- /dev/null
+++ b/examples/platform/pwm_iot2050.c
@@ -0,0 +1,105 @@
+/*
+ * Author: Le Jin <le.jin@siemens.com>
+ * Copyright (c) Siemens AG, 2019
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <signal.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include "mraa/pwm.h"
+
+#define NUM_CHANNELS        (6)
+#define PWM_FREQ_US         (1)
+#define PWM_DUTY_PERCENT    (0.5)
+#define PWM_START_PIN       (4)
+
+volatile sig_atomic_t flag = 1;
+
+void
+sig_handler(int signum)
+{
+    if (signum == SIGINT) {
+        fprintf(stdout, "Exiting...\n");
+        flag = 0;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    int i;
+    mraa_result_t status = MRAA_SUCCESS;
+    mraa_pwm_context pwm[NUM_CHANNELS];
+
+    signal(SIGINT, sig_handler);
+    /* init */
+    mraa_init();
+    memset(pwm, 0, sizeof(mraa_pwm_context) * NUM_CHANNELS);
+    for(i=0; i<NUM_CHANNELS; i++) {
+        pwm[i] = mraa_pwm_init(PWM_START_PIN + i);
+        if (pwm[i] == NULL) {
+            fprintf(stderr, "Failed to initialize PWM%d\n", i);
+            mraa_deinit();
+            return EXIT_FAILURE;
+        }
+    }
+    for(i=0; i<NUM_CHANNELS; i++) {
+        /* set PWM period */
+        status = mraa_pwm_period_us(pwm[i], PWM_FREQ_US);
+        if (status != MRAA_SUCCESS) {
+            goto err_exit;
+        }
+        /* write PWM duty cyle */
+        status = mraa_pwm_write(pwm[i], PWM_DUTY_PERCENT);
+        if (status != MRAA_SUCCESS) {
+            goto err_exit;
+        }
+        /* enable PWM */
+        status = mraa_pwm_enable(pwm[i], 1);
+        if (status != MRAA_SUCCESS) {
+            goto err_exit;
+        }
+    }
+    while (flag) {
+    }
+    /* close PWM */
+    for(i=0; i<NUM_CHANNELS; i++) {
+        mraa_pwm_close(pwm[i]);
+    }
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_SUCCESS;
+
+err_exit:
+    mraa_result_print(status);
+
+    /* close PWM */
+    for(i=0; i<NUM_CHANNELS; i++) {
+        mraa_pwm_close(pwm[i]);
+    }
+
+    /* deinitialize mraa for the platform (not needed most of the times) */
+    mraa_deinit();
+
+    return EXIT_FAILURE;
+}
diff --git a/examples/platform/spi_iot2050.c b/examples/platform/spi_iot2050.c
new file mode 100644
index 0000000..81d0171
--- /dev/null
+++ b/examples/platform/spi_iot2050.c
@@ -0,0 +1,82 @@
+/*
+ * Author: Le Jin <le.jin@siemens.com>
+ * Copyright (c) Siemens AG, 2019
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+#include <signal.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include "mraa/spi.h"
+
+#define SPI_BUS (0)
+#define SPI_FREQ 400000
+#define BUF_SIZE (64)
+
+int main(int argc, char *argv[])
+{
+    mraa_result_t status = MRAA_SUCCESS;
+    mraa_spi_context spi;
+    uint8_t tx_buf[BUF_SIZE];
+    uint8_t rx_buf[BUF_SIZE];
+    int i;
+
+    /* initialize mraa */
+    mraa_init();
+    /* initialize SPI bus */
+    spi = mraa_spi_init(SPI_BUS);
+    if (spi == NULL) {
+        fprintf(stderr, "Failed to initialize SPI\n");
+        mraa_deinit();
+        return EXIT_FAILURE;
+    }
+    status = mraa_spi_frequency(spi, SPI_FREQ);
+    if (status != MRAA_SUCCESS)
+        goto error;
+    fprintf(stderr, "Start SPI transfer\n");
+    for(i=0; i<BUF_SIZE; i++) {
+        tx_buf[i] = i;
+        rx_buf[i] = 0;
+    }
+    status = mraa_spi_transfer_buf(spi, tx_buf, rx_buf, BUF_SIZE);
+    if(status != MRAA_SUCCESS)
+        goto error;
+    fprintf(stderr, "SPI Send Data:\n");
+    for(i=0; i<BUF_SIZE; i++) {
+        fprintf(stderr, "%02X ", tx_buf[i]);
+        if(!((i+1) % 8))
+            fprintf(stderr, "\n");
+    }
+    fprintf(stderr, "SPI Recevied Data:\n");
+    for(i=0; i<BUF_SIZE; i++) {
+        fprintf(stderr, "%02X ", rx_buf[i]);
+        if(!((i+1) % 8))
+            fprintf(stderr, "\n");
+    }
+    fprintf(stderr, "\n");
+    return EXIT_SUCCESS;
+error:
+    mraa_result_print(status);
+    /* stop spi */
+    mraa_spi_stop(spi);
+    /* deinitialize mraa */
+    mraa_deinit();
+    return EXIT_FAILURE;
+}
\ No newline at end of file
-- 
2.26.2

