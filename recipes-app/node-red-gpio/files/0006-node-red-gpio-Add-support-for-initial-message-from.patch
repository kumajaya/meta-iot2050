From 03f27bff237021159536e5e5ea9e4e5d3421d521 Mon Sep 17 00:00:00 2001
From: Ivan Mikhaylov <ivan.mikhaylov@siemens.com>
Date: Tue, 2 Nov 2021 17:20:04 +0000
Subject: [PATCH] node-red-gpio: Add support for initial message from digital
 input

This allows to send out an initial message with the current digital pin
state on startup, simplifying initializations of certain flows.

Based on siemens/meta-iot2000@5fc2bbe patch 0003.

Signed-off-by: Ivan Mikhaylov <ivan.mikhaylov@siemens.com>
---
 hardware/intel/mraa-gpio-din.html |  8 +++++++-
 hardware/intel/mraa-gpio-din.js   | 20 ++++++++++++++++----
 2 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/hardware/intel/mraa-gpio-din.html b/hardware/intel/mraa-gpio-din.html
index 58a1363..1c2903d 100644
--- a/hardware/intel/mraa-gpio-din.html
+++ b/hardware/intel/mraa-gpio-din.html
@@ -8,7 +8,8 @@
             name: {value:""},
             pin:  {value:"", required: true},
             interrupt: {value:"", required: true},
-            mode: {value:"", required: true}
+            mode: {value:"", required: true},
+            initial: {value: false}
         },
         inputs:0,
         outputs:1,
@@ -89,6 +90,11 @@
             <option value="b">Both </option>
         </select>
     </div>
+    <div class="form-row" id="node-initial-tick">
+        <label>&nbsp;</label>
+        <input type="checkbox" id="node-input-initial" style="display: inline-block; width: auto; vertical-align: top;">
+        <label for="node-input-initial" style="width: 70%;">Send initial message with level of pin.</label>
+    </div>
     <div class="form-row">
         <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
         <input type="text" id="node-input-name" placeholder="Name" style="width: 250px;">
diff --git a/hardware/intel/mraa-gpio-din.js b/hardware/intel/mraa-gpio-din.js
index 9fc3a12..a8f6a83 100644
--- a/hardware/intel/mraa-gpio-din.js
+++ b/hardware/intel/mraa-gpio-din.js
@@ -8,13 +8,14 @@ module.exports = function(RED) {
         this.pin = n.pin;
         this.interrupt = n.interrupt;
         this.mode = n.mode;
+        this.initialMsg = n.initial;
         this.x = new m.Gpio(parseInt(this.pin));
         this.board = m.getPlatformName();
         var node = this;
         node.x.mode(parseInt(this.mode));
         node.x.dir(m.DIR_IN);
-        node.x.isr(m.EDGE_BOTH, function() {
-            var g = node.x.read();
+
+        var eventHandler = function(g) {
             var msg = { payload:g, topic:node.board+"/D"+node.pin };
             switch (g) {
                 case 0: {
@@ -35,8 +36,15 @@ module.exports = function(RED) {
                     node.status({fill:"grey",shape:"ring",text:"unknown"});
                 }
             }
-        });
-        switch (node.x.read()) {
+        }
+
+        var isrCallback = function() {
+            eventHandler(node.x.read());
+        }
+
+        node.x.isr(m.EDGE_BOTH, isrCallback);
+        var initialState = node.x.read();
+        switch (initialState) {
             case 0: {
                 node.status({fill:"green",shape:"ring",text:"low"});
                 break;
@@ -49,6 +57,10 @@ module.exports = function(RED) {
                 node.status({});
             }
         }
+
+        if (this.initialMsg)
+            eventHandler(initialState);
+
         this.on('close', function() {
             node.x.isr(m.EDGE_BOTH, null);
             node.x.isrExit();
-- 
2.33.1
