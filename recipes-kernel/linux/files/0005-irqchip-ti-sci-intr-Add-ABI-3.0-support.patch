From 7014352fb2af049c7eb470706f1718e146c146cf Mon Sep 17 00:00:00 2001
From: Lokesh Vutla <lokeshvutla@ti.com>
Date: Wed, 21 Oct 2020 00:47:38 +0530
Subject: [PATCH 05/27] irqchip/ti-sci-intr: Add ABI 3.0 support

Update the intr driver to include support for ABI 3.0

Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
---
 drivers/irqchip/irq-ti-sci-intr.c | 198 ++++++++++++++++++++----------
 1 file changed, 132 insertions(+), 66 deletions(-)

diff --git a/drivers/irqchip/irq-ti-sci-intr.c b/drivers/irqchip/irq-ti-sci-intr.c
index d7a909a01344..2542da99a78c 100644
--- a/drivers/irqchip/irq-ti-sci-intr.c
+++ b/drivers/irqchip/irq-ti-sci-intr.c
@@ -37,6 +37,8 @@ struct ti_sci_intr_irq_domain {
 	const struct ti_sci_handle *sci;
 	struct ti_sci_resource *dst_irq;
 	u16 dst_id;
+	struct device *dev;
+	u32 type;
 };
 
 static struct irq_chip ti_sci_intr_irq_chip = {
@@ -64,7 +66,17 @@ static int ti_sci_intr_irq_domain_translate(struct irq_domain *domain,
 					    unsigned long *hwirq,
 					    unsigned int *type)
 {
-	if (is_of_node(fwspec->fwnode)) {
+	struct ti_sci_intr_irq_domain *intr = domain->host_data;
+
+	if (ti_sci_abi_3_and_above(intr->sci)) {
+		if (fwspec->param_count != 1)
+			return -EINVAL;
+
+		*hwirq = fwspec->param[0];
+		*type = intr->type;
+
+		return 0;
+	} else {
 		if (fwspec->param_count != 3)
 			return -EINVAL;
 
@@ -97,69 +109,112 @@ static void ti_sci_intr_irq_domain_free(struct irq_domain *domain,
 					unsigned int virq, unsigned int nr_irqs)
 {
 	struct ti_sci_intr_irq_domain *intr = domain->host_data;
-	struct irq_data *data, *parent_data;
-	int i;
+	int out_irq, src_id, src_index;
+	struct irq_data *data;
 
 	intr = domain->host_data;
 
-	for (i = 0; i < nr_irqs; i++) {
-		data = irq_domain_get_irq_data(domain, virq + i);
-		parent_data = irq_domain_get_irq_data(domain->parent, virq + i);
+	data = irq_domain_get_irq_data(domain, virq);
+	out_irq = (uintptr_t)data->chip_data;
 
-		ti_sci_intr_delete_desc(intr, HWIRQ_TO_DEVID(data->hwirq),
-					HWIRQ_TO_IRQID(data->hwirq), parent_data->hwirq);
-		ti_sci_release_resource(intr->dst_irq, parent_data->hwirq);
-		irq_domain_free_irqs_parent(domain, virq + i, 1);
-		irq_domain_reset_irq_data(data);
+	if (ti_sci_abi_3_and_above(intr->sci)) {
+		src_id = intr->dst_id;
+		src_index = data->hwirq;
+	} else {
+		src_id = HWIRQ_TO_DEVID(data->hwirq);
+		src_index = HWIRQ_TO_IRQID(data->hwirq);
 	}
+
+	ti_sci_intr_delete_desc(intr, src_id, src_index, out_irq);
+	ti_sci_release_resource(intr->dst_irq, out_irq);
+	irq_domain_free_irqs_parent(domain, virq, 1);
+	irq_domain_reset_irq_data(data);
 }
 
 /**
- * allocate_gic_irq() - Allocate GIC specific IRQ
- * @domain:	Point to the interrupt router IRQ domain
- * @dev:	TISCI device IRQ generating the IRQ
- * @irq:	IRQ offset within the device
- * @flags:	Corresponding flags to the IRQ
+ * ti_sci_intr_xlate_irq() - Translate hwirq to parent's hwirq.
+ * @intr:	IRQ domain corresponding to Interrupt Router
+ * @irq:	Hardware irq corresponding to the above irq domain
  *
- * Returns 0 if all went well else appropriate error pointer.
+ * Return parent irq number if translation is available else -ENOENT.
  */
-static int allocate_gic_irq(struct irq_domain *domain, unsigned int virq,
-			    u16 dev, u16 irq, u32 flags)
+static int ti_sci_intr_xlate_irq(struct ti_sci_intr_irq_domain *intr, u32 irq)
+{
+	struct device_node *np = dev_of_node(intr->dev);
+	u32 base, pbase, size, len;
+	const __be32 *range;
+
+	range = of_get_property(np, "ti,interrupt-ranges", &len);
+	if (!range)
+		return irq;
+
+	for (len /= sizeof(*range); len >= 3; len -= 3) {
+		base = be32_to_cpu(*range++);
+		pbase = be32_to_cpu(*range++);
+		size = be32_to_cpu(*range++);
+
+		if (base <= irq && irq < base + size)
+			return irq - base + pbase;
+	}
+
+	return -ENOENT;
+}
+
+static int ti_sci_intr_alloc_parent_irq(struct irq_domain *domain,
+					unsigned int virq, u32 hwirq, u32 type)
 {
 	struct ti_sci_intr_irq_domain *intr = domain->host_data;
+	struct device_node *parent_node;
+	u16 out_irq, src_id, src_index;
 	struct irq_fwspec fwspec;
-	u16 dst_irq;
-	int err;
+	int p_hwirq, err = 0;
 
-	if (!irq_domain_get_of_node(domain->parent))
+	out_irq = ti_sci_get_free_resource(intr->dst_irq);
+	if (out_irq == TI_SCI_RESOURCE_NULL)
 		return -EINVAL;
 
-	dst_irq = ti_sci_get_free_resource(intr->dst_irq);
+	if (ti_sci_abi_3_and_above(intr->sci)) {
+		p_hwirq = ti_sci_intr_xlate_irq(intr, out_irq);
+		if (p_hwirq < 0)
+			goto err_irqs;
+		src_id = intr->dst_id;
+		src_index = hwirq;
+	} else {
+		p_hwirq = out_irq;
+		src_id = HWIRQ_TO_DEVID(hwirq);
+		src_index = HWIRQ_TO_IRQID(hwirq);
+	}
 
-	fwspec.fwnode = domain->parent->fwnode;
-	fwspec.param_count = 3;
-	fwspec.param[0] = 0;	/* SPI */
-	fwspec.param[1] = dst_irq - 32; /* SPI offset */
-	fwspec.param[2] = flags & IRQ_TYPE_SENSE_MASK;
+	parent_node = of_irq_find_parent(dev_of_node(intr->dev));
+	fwspec.fwnode = of_node_to_fwnode(parent_node);
+
+	if (of_device_is_compatible(parent_node, "arm,gic-v3")) {
+		/* Parent is GIC */
+		fwspec.param_count = 3;
+		fwspec.param[0] = 0;	/* SPI */
+		fwspec.param[1] = p_hwirq - 32; /* SPI offset */
+		fwspec.param[2] = type;
+	} else {
+		/* Parent is Interrupt Router */
+		fwspec.param_count = 1;
+		fwspec.param[0] = p_hwirq;
+	}
 
 	err = irq_domain_alloc_irqs_parent(domain, virq, 1, &fwspec);
 	if (err)
 		goto err_irqs;
 
-	err = intr->sci->ops.rm_irq_ops.set_irq(intr->sci, dev, irq,
-						intr->dst_id, dst_irq);
-	if (err) {
-		pr_err("%s: IRQ allocation failed from src = %d, src_index = %d to dst_id = %d, dst_irq = %d",
-		       __func__, dev, irq, intr->dst_id, dst_irq);
+	err = intr->sci->ops.rm_irq_ops.set_irq(intr->sci, src_id, src_index,
+						intr->dst_id, out_irq);
+	if (err)
 		goto err_msg;
-	}
 
-	return 0;
+	return out_irq;
 
 err_msg:
 	irq_domain_free_irqs_parent(domain, virq, 1);
 err_irqs:
-	ti_sci_release_resource(intr->dst_irq, dst_irq);
+	ti_sci_release_resource(intr->dst_irq, out_irq);
 	return err;
 }
 
@@ -177,33 +232,22 @@ static int ti_sci_intr_irq_domain_alloc(struct irq_domain *domain,
 					void *data)
 {
 	struct irq_fwspec *fwspec = data;
-	u16 src_id, src_index;
 	unsigned long hwirq;
-	int i, err;
+	int err, p_hwirq;
 	u32 type;
 
 	err = ti_sci_intr_irq_domain_translate(domain, fwspec, &hwirq, &type);
 	if (err)
 		return err;
 
-	src_id = HWIRQ_TO_DEVID(hwirq);
-	src_index = HWIRQ_TO_IRQID(hwirq);
+	p_hwirq = ti_sci_intr_alloc_parent_irq(domain, virq, hwirq, type);
+	if (p_hwirq < 0)
+		return p_hwirq;
 
-	for (i = 0; i < nr_irqs; i++) {
-		err = allocate_gic_irq(domain, virq + i, src_id, src_index + i,
-				       type);
-		if (err)
-			goto err_irq;
+	irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
+				      &ti_sci_intr_irq_chip,
+				      (void *)(uintptr_t)p_hwirq);
 
-		err = irq_domain_set_hwirq_and_chip(domain, virq + i, hwirq + i,
-						    &ti_sci_intr_irq_chip, NULL);
-		if (err)
-			goto err_irq;
-	}
-
-	return 0;
-err_irq:
-	ti_sci_intr_irq_domain_free(domain, virq, i);
 	return err;
 }
 
@@ -246,19 +290,41 @@ static int ti_sci_intr_irq_domain_probe(struct platform_device *pdev)
 		return ret;
 	}
 
-	ret = of_property_read_u32(dev_of_node(dev), "ti,sci-dst-id",
-				   (u32 *)&intr->dst_id);
-	if (ret) {
-		dev_err(dev, "missing 'ti,sci-dst-id' property\n");
-		return -EINVAL;
-	}
+	intr->dev = dev;
+	if (ti_sci_abi_3_and_above(intr->sci)) {
+		ret = of_property_read_u32(dev_of_node(dev), "ti,intr-trigger-type", &intr->type);
+		if (ret) {
+			dev_err(dev, "missing ti,intr-trigger-type property\n");
+			return -EINVAL;
+		}
 
-	intr->dst_irq = devm_ti_sci_get_of_resource(intr->sci, dev,
-						    intr->dst_id,
-						    "ti,sci-rm-range-girq");
-	if (IS_ERR(intr->dst_irq)) {
-		dev_err(dev, "Destination irq resource allocation failed\n");
-		return PTR_ERR(intr->dst_irq);
+		ret = of_property_read_u32(dev_of_node(dev), "ti,sci-dev-id", (u32 *)&intr->dst_id);
+		if (ret) {
+			dev_err(dev, "missing 'ti,sci-dev-id' property\n");
+			return -EINVAL;
+		}
+
+		intr->dst_irq = devm_ti_sci_get_resource(intr->sci, dev, intr->dst_id,
+							  TI_SCI_RESASG_SUBTYPE_IR_OUTPUT);
+		if (IS_ERR(intr->dst_irq)) {
+			dev_err(dev, "Destination irq resource allocation failed\n");
+			return PTR_ERR(intr->dst_irq);
+		}
+	} else {
+		ret = of_property_read_u32(dev_of_node(dev), "ti,sci-dst-id",
+					   (u32 *)&intr->dst_id);
+		if (ret) {
+			dev_err(dev, "missing 'ti,sci-dst-id' property\n");
+			return -EINVAL;
+		}
+
+		intr->dst_irq = devm_ti_sci_get_of_resource(intr->sci, dev,
+							    intr->dst_id,
+							    "ti,sci-rm-range-girq");
+		if (IS_ERR(intr->dst_irq)) {
+			dev_err(dev, "Destination irq resource allocation failed\n");
+			return PTR_ERR(intr->dst_irq);
+		}
 	}
 
 	domain = irq_domain_add_hierarchy(parent_domain, 0, 0, dev_of_node(dev),
-- 
2.31.1

