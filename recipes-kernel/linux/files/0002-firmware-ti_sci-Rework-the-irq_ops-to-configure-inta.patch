From 5a58f7c2a08b1df1285f733fac28079b7db3607f Mon Sep 17 00:00:00 2001
From: Lokesh Vutla <lokeshvutla@ti.com>
Date: Tue, 20 Oct 2020 23:28:33 +0530
Subject: [PATCH 02/26] firmware: ti_sci: Rework the irq_ops to configure inta
 and intr separately

Currently the irq route form IP -> INTA -> INTR -> GIC is configured in
a single message and happens in inta driver. This will not not work when
ABI 3.0 is introduced. So, update irq_ops such that INTA configuration
happens in one message and INTR configuration happens in a different
message for the above mentioned irq route.

Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
---
 drivers/firmware/ti_sci.c              | 275 ++++---------------------
 drivers/irqchip/irq-ti-sci-inta.c      |  16 +-
 drivers/irqchip/irq-ti-sci-intr.c      |  25 +--
 include/linux/soc/ti/ti_sci_protocol.h |  87 ++------
 4 files changed, 67 insertions(+), 336 deletions(-)

diff --git a/drivers/firmware/ti_sci.c b/drivers/firmware/ti_sci.c
index 72d53423bd20..1b73e7b90d28 100644
--- a/drivers/firmware/ti_sci.c
+++ b/drivers/firmware/ti_sci.c
@@ -1884,7 +1884,7 @@ int ti_sci_cmd_get_resource_range_from_shost(const struct ti_sci_handle *handle,
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
  * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
+ * @dst_host_irq:	IRQ number of the destination device
  * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  * @vint:		Virtual interrupt to be used within the IA
  * @global_event:	Global event number to be used for the requesting event
@@ -1959,7 +1959,7 @@ static int ti_sci_manage_irq(const struct ti_sci_handle *handle,
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
  * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
+ * @dst_host_irq:	IRQ number of the destination device
  * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  * @vint:		Virtual interrupt to be used within the IA
  * @global_event:	Global event number to be used for the requesting event
@@ -1993,7 +1993,7 @@ static int ti_sci_set_irq(const struct ti_sci_handle *handle, u32 valid_params,
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
  * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
+ * @dst_host_irq:	IRQ number of the destination device
  * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  * @vint:		Virtual interrupt to be used within the IA
  * @global_event:	Global event number to be used for the requesting event
@@ -2020,141 +2020,44 @@ static int ti_sci_free_irq(const struct ti_sci_handle *handle, u32 valid_params,
 }
 
 /**
- * ti_sci_cmd_set_direct_irq() - Configure a non-event based direct irq route
- *				 between the requested source and destination.
+ * ti_sci_cmd_set_irq() - Configure a host irq route between the requested
+ *			  source and destination.
  * @handle:		Pointer to TISCI handle.
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
  * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
+ * @dst_host_irq:	IRQ number of the destination device
+ * @vint_irq:		Boolean specifying if this interrupt belongs to
+ *			Interrupt Aggregator.
  *
  * Return: 0 if all went fine, else return appropriate error.
  */
-static int ti_sci_cmd_set_direct_irq(const struct ti_sci_handle *handle,
-				     u16 src_id, u16 src_index, u16 dst_id,
-				     u16 dst_host_irq)
+static int ti_sci_cmd_set_irq(const struct ti_sci_handle *handle, u16 src_id,
+			      u16 src_index, u16 dst_id, u16 dst_host_irq)
 {
 	u32 valid_params = MSG_FLAG_DST_ID_VALID | MSG_FLAG_DST_HOST_IRQ_VALID;
 
-	return ti_sci_set_irq(handle, valid_params, src_id, src_index,
-			      dst_id, dst_host_irq, 0, 0, 0, 0, 0);
-}
-
-/**
- * ti_sci_cmd_set_event_irq() - Configure an event based irq route between the
- *				requested source and destination
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
- * @vint:		Virtual interrupt to be used within the IA
- * @global_event:	Global event number to be used for the requesting event
- * @vint_status_bit:	Virtual interrupt status bit to be used for the event
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static int ti_sci_cmd_set_event_irq(const struct ti_sci_handle *handle,
-				    u16 src_id, u16 src_index, u16 dst_id,
-				    u16 dst_host_irq, u16 ia_id, u16 vint,
-				    u16 global_event, u8 vint_status_bit)
-{
-	u32 valid_params = MSG_FLAG_DST_ID_VALID |
-			   MSG_FLAG_DST_HOST_IRQ_VALID | MSG_FLAG_IA_ID_VALID |
-			   MSG_FLAG_VINT_VALID | MSG_FLAG_GLB_EVNT_VALID |
-			   MSG_FLAG_VINT_STS_BIT_VALID;
-
 	return ti_sci_set_irq(handle, valid_params, src_id, src_index, dst_id,
-			      dst_host_irq, ia_id, vint, global_event,
-			      vint_status_bit, 0);
-}
-
-/**
- * ti_sci_cmd_set_direct_irq_from_shost() - Configure a non-event based direct
- *					    irq route between the source and
- *					    destination belonging to a
- *					    specified host.
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static
-int ti_sci_cmd_set_direct_irq_from_shost(const struct ti_sci_handle *handle,
-					 u16 src_id, u16 src_index, u16 dst_id,
-					 u16 dst_host_irq, u8 s_host)
-{
-	u32 valid_params = MSG_FLAG_DST_ID_VALID | MSG_FLAG_DST_HOST_IRQ_VALID |
-			   MSG_FLAG_SHOST_VALID;
-
-	return ti_sci_set_irq(handle, valid_params, src_id, src_index,
-			      dst_id, dst_host_irq, 0, 0, 0, 0, s_host);
-}
-
-/**
- * ti_sci_cmd_set_event_irq_from_shost() - Configure an event based irq
- *					   route between the source and
- *					   destination belonging to a
- *					   specified host.
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
- * @vint:		Virtual interrupt to be used within the IA
- * @global_event:	Global event number to be used for the requesting event
- * @vint_status_bit:	Virtual interrupt status bit to be used for the event
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static
-int ti_sci_cmd_set_event_irq_from_shost(const struct ti_sci_handle *handle,
-					u16 src_id, u16 src_index, u16 dst_id,
-					u16 dst_host_irq, u16 ia_id, u16 vint,
-					u16 global_event, u8 vint_status_bit,
-					u8 s_host)
-{
-	u32 valid_params = MSG_FLAG_DST_ID_VALID |
-			   MSG_FLAG_DST_HOST_IRQ_VALID | MSG_FLAG_IA_ID_VALID |
-			   MSG_FLAG_VINT_VALID | MSG_FLAG_GLB_EVNT_VALID |
-			   MSG_FLAG_VINT_STS_BIT_VALID | MSG_FLAG_SHOST_VALID;
-
-	return ti_sci_set_irq(handle, valid_params, src_id, src_index,
-			      dst_id, dst_host_irq, ia_id, vint,
-			      global_event, vint_status_bit, s_host);
+			      dst_host_irq, 0, 0, 0, 0, 0);
 }
 
 /**
- * ti_sci_cmd_set_event_irq_to_poll() - Configure an event based irq
- *					in polling mode
+ * ti_sci_cmd_set_event_map() - Configure an event based irq route between the
+ *				requested source and Interrupt Aggregator.
  * @handle:		Pointer to TISCI handle.
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
  * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  * @vint:		Virtual interrupt to be used within the IA
  * @global_event:	Global event number to be used for the requesting event
  * @vint_status_bit:	Virtual interrupt status bit to be used for the event
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
  *
  * Return: 0 if all went fine, else return appropriate error.
  */
-static int ti_sci_cmd_set_event_irq_to_poll(const struct ti_sci_handle *handle,
-					    u16 src_id, u16 src_index,
-					    u16 ia_id, u16 vint,
-					    u16 global_event,
-					    u8 vint_status_bit)
+static int ti_sci_cmd_set_event_map(const struct ti_sci_handle *handle,
+				    u16 src_id, u16 src_index, u16 ia_id,
+				    u16 vint, u16 global_event,
+				    u8 vint_status_bit)
 {
 	u32 valid_params = MSG_FLAG_IA_ID_VALID | MSG_FLAG_VINT_VALID |
 			   MSG_FLAG_GLB_EVNT_VALID |
@@ -2165,34 +2068,33 @@ static int ti_sci_cmd_set_event_irq_to_poll(const struct ti_sci_handle *handle,
 }
 
 /**
- * ti_sci_cmd_free_direct_irq() - Free a non-event based direct irq route
- *				  between the requested source and destination.
+ * ti_sci_cmd_free_irq() - Free a host irq route between the between the
+ *			   requested source and destination.
  * @handle:		Pointer to TISCI handle.
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
  * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
+ * @dst_host_irq:	IRQ number of the destination device
+ * @vint_irq:		Boolean specifying if this interrupt belongs to
+ *			Interrupt Aggregator.
  *
  * Return: 0 if all went fine, else return appropriate error.
  */
-static int ti_sci_cmd_free_direct_irq(const struct ti_sci_handle *handle,
-				      u16 src_id, u16 src_index, u16 dst_id,
-				      u16 dst_host_irq)
+static int ti_sci_cmd_free_irq(const struct ti_sci_handle *handle, u16 src_id,
+			       u16 src_index, u16 dst_id, u16 dst_host_irq)
 {
 	u32 valid_params = MSG_FLAG_DST_ID_VALID | MSG_FLAG_DST_HOST_IRQ_VALID;
 
-	return ti_sci_free_irq(handle, valid_params, src_id, src_index,
-			       dst_id, dst_host_irq, 0, 0, 0, 0, 0);
+	return ti_sci_free_irq(handle, valid_params, src_id, src_index, dst_id,
+			       dst_host_irq, 0, 0, 0, 0, 0);
 }
 
 /**
- * ti_sci_cmd_free_event_irq() - Free an event based irq route between the
- *				 requested source and destination
+ * ti_sci_cmd_free_event_map() - Free an event map between the requested source
+ *				 and Interrupt Aggregator.
  * @handle:		Pointer to TISCI handle.
  * @src_id:		Device ID of the IRQ source
  * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
  * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  * @vint:		Virtual interrupt to be used within the IA
  * @global_event:	Global event number to be used for the requesting event
@@ -2200,111 +2102,15 @@ static int ti_sci_cmd_free_direct_irq(const struct ti_sci_handle *handle,
  *
  * Return: 0 if all went fine, else return appropriate error.
  */
-static int ti_sci_cmd_free_event_irq(const struct ti_sci_handle *handle,
-				     u16 src_id, u16 src_index, u16 dst_id,
-				     u16 dst_host_irq, u16 ia_id, u16 vint,
-				     u16 global_event, u8 vint_status_bit)
+static int ti_sci_cmd_free_event_map(const struct ti_sci_handle *handle,
+				     u16 src_id, u16 src_index, u16 ia_id,
+				     u16 vint, u16 global_event,
+				     u8 vint_status_bit)
 {
-	u32 valid_params = MSG_FLAG_DST_ID_VALID |
-			   MSG_FLAG_DST_HOST_IRQ_VALID | MSG_FLAG_IA_ID_VALID |
+	u32 valid_params = MSG_FLAG_IA_ID_VALID |
 			   MSG_FLAG_VINT_VALID | MSG_FLAG_GLB_EVNT_VALID |
 			   MSG_FLAG_VINT_STS_BIT_VALID;
 
-	return ti_sci_free_irq(handle, valid_params, src_id, src_index,
-			       dst_id, dst_host_irq, ia_id, vint,
-			       global_event, vint_status_bit, 0);
-}
-
-/**
- * ti_sci_cmd_free_direct_irq_from_shost() - Free a non-event based direct irq
- *					     route between the source and
- *					     destination belonging to a
- *					     specified host.
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static
-int ti_sci_cmd_free_direct_irq_from_shost(const struct ti_sci_handle *handle,
-					  u16 src_id, u16 src_index, u16 dst_id,
-					  u16 dst_host_irq, u8 s_host)
-{
-	u32 valid_params = MSG_FLAG_DST_ID_VALID | MSG_FLAG_DST_HOST_IRQ_VALID |
-			   MSG_FLAG_SHOST_VALID;
-
-	return ti_sci_free_irq(handle, valid_params, src_id, src_index,
-			       dst_id, dst_host_irq, 0, 0, 0, 0, s_host);
-}
-
-/**
- * ti_sci_cmd_free_event_irq_from_shost() - Free an event based irq
- *					    route between the source and
- *					    destination belonging to a
- *					    specified host.
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
- * @vint:		Virtual interrupt to be used within the IA
- * @global_event:	Global event number to be used for the requesting event
- * @vint_status_bit:	Virtual interrupt status bit to be used for the event
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static
-int ti_sci_cmd_free_event_irq_from_shost(const struct ti_sci_handle *handle,
-					 u16 src_id, u16 src_index, u16 dst_id,
-					 u16 dst_host_irq, u16 ia_id, u16 vint,
-					 u16 global_event, u8 vint_status_bit,
-					 u8 s_host)
-{
-	u32 valid_params = MSG_FLAG_DST_ID_VALID |
-			   MSG_FLAG_DST_HOST_IRQ_VALID | MSG_FLAG_IA_ID_VALID |
-			   MSG_FLAG_VINT_VALID | MSG_FLAG_GLB_EVNT_VALID |
-			   MSG_FLAG_VINT_STS_BIT_VALID | MSG_FLAG_SHOST_VALID;
-
-	return ti_sci_free_irq(handle, valid_params, src_id, src_index,
-			       dst_id, dst_host_irq, ia_id, vint,
-			       global_event, vint_status_bit, s_host);
-}
-
-/**
- * ti_sci_cmd_free_event_irq_to_poll() - Free an event based irq
- *					 in polling mode
- * @handle:		Pointer to TISCI handle.
- * @src_id:		Device ID of the IRQ source
- * @src_index:		IRQ source index within the source device
- * @dst_id:		Device ID of the IRQ destination
- * @dt_host_irq:	IRQ number of the destination device
- * @ia_id:		Device ID of the IA, if the IRQ flows through this IA
- * @vint:		Virtual interrupt to be used within the IA
- * @global_event:	Global event number to be used for the requesting event
- * @vint_status_bit:	Virtual interrupt status bit to be used for the event
- * @s_host:		Secondary host ID to which the irq/event is being
- *			requested for.
- *
- * Return: 0 if all went fine, else return appropriate error.
- */
-static int ti_sci_cmd_free_event_irq_to_poll(const struct ti_sci_handle *handle,
-					     u16 src_id, u16 src_index,
-					     u16 ia_id, u16 vint,
-					     u16 global_event,
-					     u8 vint_status_bit)
-{
-	u32 valid_params = MSG_FLAG_IA_ID_VALID | MSG_FLAG_VINT_VALID |
-			   MSG_FLAG_GLB_EVNT_VALID |
-			   MSG_FLAG_VINT_STS_BIT_VALID;
-
 	return ti_sci_free_irq(handle, valid_params, src_id, src_index, 0, 0,
 			       ia_id, vint, global_event, vint_status_bit, 0);
 }
@@ -3127,17 +2933,10 @@ static void ti_sci_setup_ops(struct ti_sci_info *info)
 	rm_core_ops->get_range_from_shost =
 				ti_sci_cmd_get_resource_range_from_shost;
 
-	iops->set_direct_irq = ti_sci_cmd_set_direct_irq;
-	iops->set_event_irq = ti_sci_cmd_set_event_irq;
-	iops->set_direct_irq_from_shost = ti_sci_cmd_set_direct_irq_from_shost;
-	iops->set_event_irq_from_shost = ti_sci_cmd_set_event_irq_from_shost;
-	iops->set_event_irq_to_poll = ti_sci_cmd_set_event_irq_to_poll;
-	iops->free_direct_irq = ti_sci_cmd_free_direct_irq;
-	iops->free_event_irq = ti_sci_cmd_free_event_irq;
-	iops->free_direct_irq_from_shost =
-					ti_sci_cmd_free_direct_irq_from_shost;
-	iops->free_event_irq_from_shost = ti_sci_cmd_free_event_irq_from_shost;
-	iops->free_event_irq_to_poll = ti_sci_cmd_free_event_irq_to_poll;
+	iops->set_irq = ti_sci_cmd_set_irq;
+	iops->set_event_map = ti_sci_cmd_set_event_map;
+	iops->free_irq = ti_sci_cmd_free_irq;
+	iops->free_event_map = ti_sci_cmd_free_event_map;
 
 	pops->request = ti_sci_cmd_proc_request;
 	pops->release = ti_sci_cmd_proc_release;
diff --git a/drivers/irqchip/irq-ti-sci-inta.c b/drivers/irqchip/irq-ti-sci-inta.c
index 88350b4072b8..2cbb13f876a4 100644
--- a/drivers/irqchip/irq-ti-sci-inta.c
+++ b/drivers/irqchip/irq-ti-sci-inta.c
@@ -18,7 +18,6 @@
 #include <linux/soc/ti/ti_sci_protocol.h>
 
 #define MAX_EVENTS_PER_VINT	64
-#define TI_SCI_EVENT_IRQ	BIT(31)
 
 #define VINT_ENABLE_CLR_OFFSET	0x18
 
@@ -151,11 +150,9 @@ static void ti_sci_free_event_irq(struct ti_sci_inta_irq_domain *inta,
 		return;
 
 	event = &vint_desc->events[event_index];
-	inta->sci->ops.rm_irq_ops.free_event_irq(inta->sci,
+	inta->sci->ops.rm_irq_ops.free_event_map(inta->sci,
 						 event->src_id,
 						 event->src_index,
-						 inta->dst_id,
-						 dst_irq,
 						 inta->ia_id, vint,
 						 event->global_event,
 						 event_index);
@@ -234,18 +231,15 @@ static int ti_sci_allocate_event_irq(struct ti_sci_inta_irq_domain *inta,
 	event->src_index = src_index;
 	event->global_event = ti_sci_get_free_resource(inta->global_event);
 
-	err = inta->sci->ops.rm_irq_ops.set_event_irq(inta->sci,
+	err = inta->sci->ops.rm_irq_ops.set_event_map(inta->sci,
 						      src_id, src_index,
-						      inta->dst_id,
-						      dst_irq,
 						      inta->ia_id,
 						      vint,
 						      event->global_event,
 						      free_bit);
 	if (err) {
-		pr_err("%s: Event allocation failed from src = %d, index = %d, to dst = %d,irq = %d,via ia_id = %d, vint = %d,global event = %d, status_bit = %d\n",
-		       __func__, src_id, src_index, inta->dst_id, dst_irq,
-		       inta->ia_id, vint, event->global_event, free_bit);
+		pr_err("%s: Event allocation failed from src = %d, index = %d, to  ia_id = %d, vint = %d,global event = %d, status_bit = %d\n",
+		       __func__, src_id, src_index, inta->ia_id, vint, event->global_event, free_bit);
 		return err;
 	}
 
@@ -295,7 +289,7 @@ static struct ti_sci_inta_vint_desc *alloc_parent_irq(struct irq_domain *domain,
 	/* Interrupt parent is Interrupt Router */
 	fwspec.param[0] = inta->ia_id;
 	fwspec.param[1] = vint;
-	fwspec.param[2] = flags | TI_SCI_EVENT_IRQ;
+	fwspec.param[2] = flags;
 
 	err = irq_domain_alloc_irqs_parent(domain, virq, 1, &fwspec);
 	if (err)
diff --git a/drivers/irqchip/irq-ti-sci-intr.c b/drivers/irqchip/irq-ti-sci-intr.c
index a8e141839a42..d7a909a01344 100644
--- a/drivers/irqchip/irq-ti-sci-intr.c
+++ b/drivers/irqchip/irq-ti-sci-intr.c
@@ -21,7 +21,6 @@
 #define TI_SCI_DEV_ID_SHIFT	16
 #define TI_SCI_IRQ_ID_MASK	0xffff
 #define TI_SCI_IRQ_ID_SHIFT	0
-#define TI_SCI_IS_EVENT_IRQ	BIT(31)
 
 #define HWIRQ_TO_DEVID(hwirq)	(((hwirq) >> (TI_SCI_DEV_ID_SHIFT)) & \
 				 (TI_SCI_DEV_ID_MASK))
@@ -84,8 +83,8 @@ static inline void ti_sci_intr_delete_desc(struct ti_sci_intr_irq_domain *intr,
 					   u16 src_id, u16 src_index,
 					   u16 dst_irq)
 {
-	intr->sci->ops.rm_irq_ops.free_direct_irq(intr->sci, src_id, src_index,
-						  intr->dst_id, dst_irq);
+	intr->sci->ops.rm_irq_ops.free_irq(intr->sci, src_id, src_index,
+					   intr->dst_id, dst_irq);
 }
 
 /**
@@ -99,21 +98,16 @@ static void ti_sci_intr_irq_domain_free(struct irq_domain *domain,
 {
 	struct ti_sci_intr_irq_domain *intr = domain->host_data;
 	struct irq_data *data, *parent_data;
-	u32 flags;
 	int i;
 
 	intr = domain->host_data;
 
 	for (i = 0; i < nr_irqs; i++) {
 		data = irq_domain_get_irq_data(domain, virq + i);
-		flags = (u32)(u64)irq_data_get_irq_chip_data(data);
 		parent_data = irq_domain_get_irq_data(domain->parent, virq + i);
 
-		if (!(flags & TI_SCI_IS_EVENT_IRQ))
-			ti_sci_intr_delete_desc(intr,
-						HWIRQ_TO_DEVID(data->hwirq),
-						HWIRQ_TO_IRQID(data->hwirq),
-						parent_data->hwirq);
+		ti_sci_intr_delete_desc(intr, HWIRQ_TO_DEVID(data->hwirq),
+					HWIRQ_TO_IRQID(data->hwirq), parent_data->hwirq);
 		ti_sci_release_resource(intr->dst_irq, parent_data->hwirq);
 		irq_domain_free_irqs_parent(domain, virq + i, 1);
 		irq_domain_reset_irq_data(data);
@@ -152,12 +146,8 @@ static int allocate_gic_irq(struct irq_domain *domain, unsigned int virq,
 	if (err)
 		goto err_irqs;
 
-	/* If event is requested then return */
-	if (flags & TI_SCI_IS_EVENT_IRQ)
-		return 0;
-
-	err = intr->sci->ops.rm_irq_ops.set_direct_irq(intr->sci, dev, irq,
-						       intr->dst_id, dst_irq);
+	err = intr->sci->ops.rm_irq_ops.set_irq(intr->sci, dev, irq,
+						intr->dst_id, dst_irq);
 	if (err) {
 		pr_err("%s: IRQ allocation failed from src = %d, src_index = %d to dst_id = %d, dst_irq = %d",
 		       __func__, dev, irq, intr->dst_id, dst_irq);
@@ -206,8 +196,7 @@ static int ti_sci_intr_irq_domain_alloc(struct irq_domain *domain,
 			goto err_irq;
 
 		err = irq_domain_set_hwirq_and_chip(domain, virq + i, hwirq + i,
-						    &ti_sci_intr_irq_chip,
-						    (void *)(u64)type);
+						    &ti_sci_intr_irq_chip, NULL);
 		if (err)
 			goto err_irq;
 	}
diff --git a/include/linux/soc/ti/ti_sci_protocol.h b/include/linux/soc/ti/ti_sci_protocol.h
index 03f80cdfffe3..c05502bf337a 100644
--- a/include/linux/soc/ti/ti_sci_protocol.h
+++ b/include/linux/soc/ti/ti_sci_protocol.h
@@ -225,77 +225,26 @@ struct ti_sci_rm_core_ops {
 #define TI_SCI_RESASG_SUBTYPE_GLOBAL_EVENT_SEVT	0xd
 /**
  * struct ti_sci_rm_irq_ops: IRQ management operations
- * @set_direct_irq:		Set Non-event Sourced direct irq to destination
- *				host(same host as ti sci interface id).
- * @set_event_irq:		Set Event based peripheral irq to destination
- *				host(same host as ti sci interface id).
- * @set_direct_irq_from_shost:	Set Non-event Sourced direct irq to a
- *				specified destination host.
- * @set_event_irq_from_shost:	Set Event based peripheral irq to a
- *				specified destination host.
- * @set_event_irq_to_poll:	Set Event based peripheral irq to polling mode.
- *				vint_status_bit is used for polling.
- * @free_direct_irq:		Free a non-event sourced direct irq to
- *				destination host(same as ti sci interface id)
- * @free_event_irq:		Free an event based peripheral irq to
- *				destination host(same as ti sci interface id)
- * @free_direct_irq_from_shost:	Free non-event based direct irq from a
- *				specified destination host.
- * @free_event_irq_from_shost:	Free event based peripheral irq from a
- *				specified destination host.
- * @free_event_irq_to_poll:	Free an event based peripheral irq that is
- *				configured in polling mode.
- *
- * NOTE: for these functions, all the parameters are consolidated and defined
- * as below:
- * - handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle
- * - src_id:	Device ID of the IRQ source
- * - src_index:	IRQ source index within the source device
- * - dst_id:	Device ID of the IRQ destination.
- * - dst_host_irq:	IRQ number of the destination device.
- * - ia_id:	Device ID of the IA, if the IRQ flows through this IA
- * - vint:	Virtual interrupt to be used within the IA
- * - global_event:	Global event number to be used for the requesting event.
- * - vint_status_bit:	Virtual interrupt status bit to be used for the event.
- * - s_host:	Secondary host ID to which the irq/event is being requested.
+ * @set_irq:		Set an IRQ route between the requested source
+ *			and destination
+ * @set_event_map:	Set an Event based peripheral irq to Interrupt
+ *			Aggregator.
+ * @free_irq:		Free an IRQ route between the requested source
+ *			and destination.
+ * @free_event_map:	Free an event based peripheral irq to Interrupt
+ *			Aggregator.
  */
 struct ti_sci_rm_irq_ops {
-	int (*set_direct_irq)(const struct ti_sci_handle *handle, u16 src_id,
-			      u16 src_index, u16 dst_id, u16 dst_host_irq);
-	int (*set_event_irq)(const struct ti_sci_handle *handle, u16 src_id,
-			     u16 src_index, u16 dst_id, u16 dst_host_irq,
-			     u16 ia_id, u16 vint, u16 global_event,
-			     u8 vint_status_bit);
-	int (*set_direct_irq_from_shost)(const struct ti_sci_handle *handle,
-					 u16 src_id, u16 src_index, u16 dst_id,
-					 u16 dst_host_irq, u8 s_host);
-	int (*set_event_irq_from_shost)(const struct ti_sci_handle *handle,
-					u16 src_id, u16 src_index, u16 dst_id,
-					u16 dst_host_irq, u16 ia_id, u16 vint,
-					u16 global_event, u8 vint_status_bit,
-					u8 s_host);
-	int (*set_event_irq_to_poll)(const struct ti_sci_handle *handle,
-				     u16 src_id, u16 src_index, u16 ia_id,
-				     u16 vint, u16 global_event,
-				     u8 vint_status_bit);
-	int (*free_direct_irq)(const struct ti_sci_handle *handle, u16 src_id,
-			       u16 src_index, u16 dst_id, u16 dst_host_irq);
-	int (*free_event_irq)(const struct ti_sci_handle *handle, u16 src_id,
-			      u16 src_index, u16 dst_id, u16 dst_host_irq,
-			      u16 ia_id, u16 vint, u16 global_event,
-			      u8 vint_status_bit);
-	int (*free_direct_irq_from_shost)(const struct ti_sci_handle *handle,
-					  u16 src_id, u16 src_index, u16 dst_id,
-					  u16 dst_host_irq, u8 s_host);
-	int (*free_event_irq_from_shost)(const struct ti_sci_handle *handle,
-					 u16 src_id, u16 src_index, u16 dst_id,
-					 u16 dst_host_irq, u16 ia_id, u16 vint,
-					 u16 global_event, u8 vint_status_bit,
-					 u8 s_host);
-	int (*free_event_irq_to_poll)(const struct ti_sci_handle *handle,
-				      u16 src_id, u16 src_index, u16 ia_id,
-				      u16 vint, u16 global_event,
-				      u8 vint_status_bit);
+	int (*set_irq)(const struct ti_sci_handle *handle, u16 src_id,
+		       u16 src_index, u16 dst_id, u16 dst_host_irq);
+	int (*set_event_map)(const struct ti_sci_handle *handle, u16 src_id,
+			     u16 src_index, u16 ia_id, u16 vint,
+			     u16 global_event, u8 vint_status_bit);
+	int (*free_irq)(const struct ti_sci_handle *handle, u16 src_id,
+			u16 src_index, u16 dst_id, u16 dst_host_irq);
+	int (*free_event_map)(const struct ti_sci_handle *handle, u16 src_id,
+			      u16 src_index, u16 ia_id, u16 vint,
+			      u16 global_event, u8 vint_status_bit);
 };
 
 /**
-- 
2.31.1

